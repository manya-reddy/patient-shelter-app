/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.Hospital;

import Business.City.City;
import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Employee.EmployeeDirectory;
import Business.Enterprise.Enterprise;
import Business.Enterprise.Hospital;
import Business.Enterprise.VaccineProvider;
import Business.Organization.Organization;
import Business.Patient.Patient;
import Business.Patient.PatientDirectory;
import Business.Person.Person;
import Business.Role.HospitalStaffRole;
import Business.Role.PatientRole;
import Business.Role.Role;
import Business.UserAccount.UserAccount;
import Business.Vaccine.Vaccine;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import userinterface.SystemAdminWorkArea.SystemAdminWorkAreaJPanel;

/**
 *
 * @author Nishigandha
 */
public class ManagePatientJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManagePatientJPanel
     */
    JPanel userProcessContainer;
    EcoSystem system;
    UserAccount userAccount;
    Organization organization;
    Enterprise enterprise;
    City city;
    EmployeeDirectory employeeDirectory;
    PatientDirectory patientDir;
    Hospital hospitalEnterprise = (Hospital) enterprise;

    public ManagePatientJPanel(JPanel userProcessContainer, City city, UserAccount userAccount, Organization organization,
            Enterprise enterprise, EcoSystem system) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.system = system;
        this.userAccount = userAccount;
        this.enterprise = enterprise;
        this.city = city;
        this.organization = organization;
//        this.patientDir=patientDir;
        populateInitialPersonTable();
        populateComboBox();
        populatePatientTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtSearchBox = new javax.swing.JTextField();
        btnSearch1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPatientAdmitH = new javax.swing.JTable();
        btnViewPersonH1 = new javax.swing.JButton();
        btnDeletePatient = new javax.swing.JButton();
        lblStatusH = new javax.swing.JLabel();
        lblManagePatient = new javax.swing.JLabel();
        lblQuarantine = new javax.swing.JLabel();
        lblSearch1 = new javax.swing.JLabel();
        comboboxQuarantinePlaceH = new javax.swing.JComboBox<>();
        lblPass = new javax.swing.JLabel();
        txtPassword1 = new javax.swing.JTextField();
        lblUser = new javax.swing.JLabel();
        txtUsername1 = new javax.swing.JTextField();
        btnAddPatientH1 = new javax.swing.JButton();
        comboboxVaccinationStatus1 = new javax.swing.JComboBox<>();
        comboDoctorH = new javax.swing.JComboBox<>();
        lblDocH = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        txtPNameH = new javax.swing.JTextField();
        btnBack = new javax.swing.JButton();
        lblAddPat = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblManagePerson = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(167, 199, 231));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtSearchBox.setBackground(new java.awt.Color(214, 229, 244));
        add(txtSearchBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 121, 220, -1));

        btnSearch1.setBackground(new java.awt.Color(0, 0, 0));
        btnSearch1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnSearch1.setForeground(new java.awt.Color(255, 255, 255));
        btnSearch1.setText("Search");
        btnSearch1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearch1ActionPerformed(evt);
            }
        });
        add(btnSearch1, new org.netbeans.lib.awtextra.AbsoluteConstraints(928, 121, -1, -1));

        tblPatientAdmitH.setBackground(new java.awt.Color(214, 229, 244));
        tblPatientAdmitH.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Patient Name", "Patient ID", "Vaccination Status", "Quarantine", "Doctor"
            }
        ));
        jScrollPane1.setViewportView(tblPatientAdmitH);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 580, 840, 183));

        btnViewPersonH1.setBackground(new java.awt.Color(0, 0, 0));
        btnViewPersonH1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnViewPersonH1.setForeground(new java.awt.Color(255, 255, 255));
        btnViewPersonH1.setText("View Person");
        btnViewPersonH1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewPersonH1ActionPerformed(evt);
            }
        });
        add(btnViewPersonH1, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 360, -1, -1));

        btnDeletePatient.setBackground(new java.awt.Color(0, 0, 0));
        btnDeletePatient.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnDeletePatient.setForeground(new java.awt.Color(255, 255, 255));
        btnDeletePatient.setText("Delete Patient");
        btnDeletePatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletePatientActionPerformed(evt);
            }
        });
        add(btnDeletePatient, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 770, -1, -1));

        lblStatusH.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblStatusH.setText("Vaccination Status:");
        add(lblStatusH, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 420, -1, -1));

        lblManagePatient.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        lblManagePatient.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblManagePatient.setText("MANAGE PATIENT PANEL");
        add(lblManagePatient, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 70, 1010, -1));

        lblQuarantine.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblQuarantine.setText("Quarantine Place:");
        add(lblQuarantine, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 460, -1, -1));

        lblSearch1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblSearch1.setText("Person Name:");
        add(lblSearch1, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 124, -1, -1));

        comboboxQuarantinePlaceH.setBackground(new java.awt.Color(214, 229, 244));
        comboboxQuarantinePlaceH.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hospital Quarantine", "Home Quarantine" }));
        add(comboboxQuarantinePlaceH, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 460, 212, -1));

        lblPass.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblPass.setText("Password:");
        add(lblPass, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 500, -1, -1));

        txtPassword1.setBackground(new java.awt.Color(214, 229, 244));
        add(txtPassword1, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 500, 208, -1));

        lblUser.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblUser.setText("Username:");
        add(lblUser, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 460, -1, 30));

        txtUsername1.setBackground(new java.awt.Color(214, 229, 244));
        txtUsername1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUsername1ActionPerformed(evt);
            }
        });
        add(txtUsername1, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 460, 208, -1));

        btnAddPatientH1.setBackground(new java.awt.Color(0, 0, 0));
        btnAddPatientH1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnAddPatientH1.setForeground(new java.awt.Color(255, 255, 255));
        btnAddPatientH1.setText("Admit Patient");
        btnAddPatientH1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPatientH1ActionPerformed(evt);
            }
        });
        add(btnAddPatientH1, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 540, -1, -1));

        comboboxVaccinationStatus1.setBackground(new java.awt.Color(214, 229, 244));
        comboboxVaccinationStatus1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Non-vaccinated", "Partially Vaccinated", "Fully Vaccinated" }));
        add(comboboxVaccinationStatus1, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 420, 212, -1));

        comboDoctorH.setBackground(new java.awt.Color(214, 229, 244));
        comboDoctorH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboDoctorHActionPerformed(evt);
            }
        });
        add(comboDoctorH, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 500, 212, -1));

        lblDocH.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblDocH.setText("Assign Doctor:");
        add(lblDocH, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 500, -1, -1));

        lblName.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblName.setText("Patient Name:");
        add(lblName, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 430, -1, -1));

        txtPNameH.setBackground(new java.awt.Color(214, 229, 244));
        add(txtPNameH, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 420, 208, -1));

        btnBack.setBackground(new java.awt.Color(0, 0, 0));
        btnBack.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnBack.setForeground(new java.awt.Color(255, 255, 255));
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 110, -1, -1));

        lblAddPat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assests/icons-male-user.png"))); // NOI18N
        add(lblAddPat, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 60, 50, 50));

        tblManagePerson.setBackground(new java.awt.Color(214, 229, 244));
        tblManagePerson.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Person Name", "ID", "Age", "Community"
            }
        ));
        jScrollPane2.setViewportView(tblManagePerson);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(326, 167, 680, 183));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assests/6.png"))); // NOI18N
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void txtUsername1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUsername1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUsername1ActionPerformed

    private void btnAddPatientH1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPatientH1ActionPerformed
        // TODO add your handling code here:
         String pass = txtPassword1.getText();
boolean flag2;
if (txtPNameH.getText().isEmpty() || txtPassword1.getText().isEmpty() || txtUsername1.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Empty Fields", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        flag2 = pass.matches("^((?=.*[0-9])(?=.*[A-Z])(?=.*[a-z])(?=.*[@$!%*#?&]).{1,20})$");

        if(!flag2) {
            JOptionPane.showMessageDialog(null, "Password should contain 1 uppercase letter, lowercase letter, number, and special character.");
            return;
        }
        
        txtPNameH.setEnabled(false);
        Employee employee = enterprise.getEmployeeDirectory().createEmp(txtPNameH.getText());
        String userName = txtUsername1.getText();
        String password = txtPassword1.getText();
        if (enterprise.getUserAccountDirectory().authenticateUser(userName, password) != null) {
            JOptionPane.showMessageDialog(null, "Username Already exists");
            return;
        }

        if (userName.equals("") || password.equals("")) {
            JOptionPane.showMessageDialog(null, "Username and password can not be empty");
            return;
        }

        String VaccinationStatus = "Unassigned";

        if (comboboxVaccinationStatus1.getSelectedItem() != null) {
            VaccinationStatus = comboboxVaccinationStatus1.getSelectedItem().toString();
        } else {
            JOptionPane.showMessageDialog(this, "Please select your Vaccination Status");
        }
        String QuarantineLocation = "Unassigned";
        if (comboboxQuarantinePlaceH.getSelectedItem() != null) {
            QuarantineLocation = comboboxQuarantinePlaceH.getSelectedItem().toString();
        } else {
            JOptionPane.showMessageDialog(this, "Please select where is the Quarantine");
        }
        String DoctorName = "unassigned";
        if (comboDoctorH.getSelectedItem() != null) {
            DoctorName = comboDoctorH.getSelectedItem().toString();

        } else {
            JOptionPane.showMessageDialog(this, "Please assign a Doctor to this patient");
        }
        Hospital hospitalEnterprise = (Hospital) enterprise;
        String patientName = txtPNameH.getText();
        int flag = 0;
        for (Patient p1 : hospitalEnterprise.getPatientDirectory().getPatientDir()) {
            if (p1.getPersonName().equals(patientName)) {
                flag = 1;
            }
        }
        if (flag == 0) {
            for (Person p : system.getPersonDirectory().getPersonList()) {
                if (p.getPersonName().equals(patientName)) {
                    hospitalEnterprise.getPatientDirectory().addPatientDir(p.personID, p.getPersonName(), p.getAdress(), p.getZipcode(), p.getAge(), p.getCommunityName(), p.getPhoneNo(), p.getEmail(), DoctorName, QuarantineLocation, VaccinationStatus);
                    Role role = new PatientRole();
                    UserAccount account = enterprise.getUserAccountDirectory().createUserAccount(userName, password, employee, role);
                    JOptionPane.showMessageDialog(null, "Patient Admitted");
                    txtSearchBox.setText("");
                    break;
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Patient already exists");
        }
        //Patient addPatient = hospitalEnterprise.getPatientDirectory().addPatientDir(DoctorName, QuarantineLocation, VaccinationStatus);
        populatePersonTable();
        populatePatientTable();
        txtUsername1.setText("");
        txtPNameH.setText("");
        txtPassword1.setText("");
//        System.out.println(ecosystem.getPersonDirectory().getPersonList());
    }//GEN-LAST:event_btnAddPatientH1ActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        HospitalAdminJPanel sysAdminwjp = (HospitalAdminJPanel) component;
        //        sysAdminwjp.populateTree();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnSearch1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearch1ActionPerformed
        // TODO add your handling code here:
       
        
        populatePersonTable();
    }//GEN-LAST:event_btnSearch1ActionPerformed

    private void comboDoctorHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboDoctorHActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboDoctorHActionPerformed

    private void btnViewPersonH1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewPersonH1ActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblManagePerson.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a Person");
        } else {
            DefaultTableModel model = (DefaultTableModel) tblManagePerson.getModel();
//            UserAccount selectedUser = (UserAccount) model.getValueAt(selectedRow, 0);
            Person selectedPerson = (Person) model.getValueAt(selectedRow, 0);
            txtPNameH.setText(selectedPerson.getPersonName());
        }
    }//GEN-LAST:event_btnViewPersonH1ActionPerformed

    private void btnDeletePatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletePatientActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblPatientAdmitH.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a Patient");
        } else {
            Hospital e = (Hospital) enterprise;
            String patientname = (String) tblPatientAdmitH.getValueAt(selectedRow, 0);

            txtPNameH.setText(patientname);
            for (Patient p : e.getPatientDirectory().getPatientDir()) {
                System.out.println(patientname);

                if (p.getPersonName().equals(patientname)) {
                    //System.out.println(p);
                    e.getPatientDirectory().deletePatient(p);
                    JOptionPane.showMessageDialog(this, "Patient deleted successfully");
                    populatePatientTable();
                }
            }

        }

    }//GEN-LAST:event_btnDeletePatientActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddPatientH1;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDeletePatient;
    private javax.swing.JButton btnSearch1;
    private javax.swing.JButton btnViewPersonH1;
    private javax.swing.JComboBox<String> comboDoctorH;
    private javax.swing.JComboBox<String> comboboxQuarantinePlaceH;
    private javax.swing.JComboBox<String> comboboxVaccinationStatus1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblAddPat;
    private javax.swing.JLabel lblDocH;
    private javax.swing.JLabel lblManagePatient;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPass;
    private javax.swing.JLabel lblQuarantine;
    private javax.swing.JLabel lblSearch1;
    private javax.swing.JLabel lblStatusH;
    private javax.swing.JLabel lblUser;
    private javax.swing.JTable tblManagePerson;
    private javax.swing.JTable tblPatientAdmitH;
    private javax.swing.JTextField txtPNameH;
    private javax.swing.JTextField txtPassword1;
    private javax.swing.JTextField txtSearchBox;
    private javax.swing.JTextField txtUsername1;
    // End of variables declaration//GEN-END:variables

    private void populateComboBox() {
        comboDoctorH.removeAllItems();
        for (City city : system.getCityList()) {
            for (Enterprise e : city.getEnterpriseDirectory().getEnterpriseArrayList()) {
                for (UserAccount account : e.getUserAccountDirectory().getUserAccountList()) {
                    if ("Business.Role.DoctorRole" == account.getRole().toString()) {
                        System.out.println("username" + account.getUsername());
                        comboDoctorH.addItem(account.getUsername());
                    }
                }
            }

        }
    }

    private void populatePersonTable() {
        String PersonName = "";

        DefaultTableModel dtm = (DefaultTableModel) tblManagePerson.getModel();
        dtm.setRowCount(0);

        Hospital hospitalEnterprise = (Hospital) enterprise;
        boolean flag = true;
        for (Person p : system.getPersonDirectory().getPersonList()) {
            if (!txtSearchBox.getText().isEmpty()) {
                PersonName = txtSearchBox.getText();
                flag=false;
            }

            if (p.getPersonName().equals(PersonName)) {
                flag = false;
                Object[] row = new Object[4];
                row[0] = p;
                row[1] = p.getPersonID();
                row[2] = p.getAge();
                row[3] = p.getCommunityName();

                dtm.addRow(row);
                

            }
            
        }
        
      
        
        

    }

    private void populateInitialPersonTable() {

        DefaultTableModel dtm = (DefaultTableModel) tblManagePerson.getModel();
        dtm.setRowCount(0);

        Hospital hospitalEnterprise = (Hospital) enterprise;
        for (Person p : system.getPersonDirectory().getPersonList()) {
            Object[] row = new Object[4];
            row[0] = p;
            row[1] = p.getPersonID();
            row[2] = p.getAge();
            row[3] = p.getCommunityName();

            dtm.addRow(row);

        }
    }

    private void populatePatientTable() {

        DefaultTableModel dtm = (DefaultTableModel) tblPatientAdmitH.getModel();
        dtm.setRowCount(0);
        Hospital hospitalEnterprise = (Hospital) enterprise;

        //for (UserAccount userAccount : enterprise.getUserAccountDirectory().getUserAccountList()){
        //System.out.println("useracc"+userAccount);
        //if("Business.Role.PatientRole" == userAccount.getRole().toString()){
//                            System.out.println("useracc"+userAccount.getRole().toString());
        for (Patient p : hospitalEnterprise.getPatientDirectory().getPatientDir()) {
            //if("Business.Role.PatientRole" == userAccount.getRole().toString()){
            Object[] row = new Object[5];
            row[0] = p.getPersonName();
            row[1] = p.getPatientId();
            row[2] = p.getVacStatus();
            row[3] = p.getQuarantineStatus();
            row[4] = p.getDoctorName();

            dtm.addRow(row);
        }
    }
    //  }                
    //} 

}
