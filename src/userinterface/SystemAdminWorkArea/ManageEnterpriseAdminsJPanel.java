/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package userinterface.SystemAdminWorkArea;

import Business.City.City;
import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Role.HospitalRole;
import Business.Role.Role;
import Business.Role.LaboratoryRole;
import Business.Role.PharmacyRole;
import Business.Role.VaccineProviderRole;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Nishigandha
 */
public class ManageEnterpriseAdminsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageVaccinationCenterJPanel
     */
    JPanel userProcessContainer;
    EcoSystem ecosystem;

    public ManageEnterpriseAdminsJPanel(JPanel userProcessContainer, EcoSystem ecosystem) {
        initComponents();
        this.ecosystem = ecosystem;
        this.userProcessContainer = userProcessContainer;
        populateCityComboBox();
        populateEnterpriseAdminTable();
    }

    private void populateCityComboBox(){
        comboboxCityE.removeAllItems();
        
        for (City city : ecosystem.getCityList()){
            comboboxCityE.addItem(city);
        }
    }
    private void populateEnterpriseCombo(City city) {
        comboEnterpriseE.removeAllItems();
        for (Enterprise enterprise : city.getEnterpriseDirectory().getEnterpriseArrayList()) {
            comboEnterpriseE.addItem(enterprise.getName());
        }
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnCreate = new javax.swing.JButton();
        txtUsernameE = new javax.swing.JTextField();
        lblUsernameE = new javax.swing.JLabel();
        txtPasswordE = new javax.swing.JTextField();
        lblPasswordE = new javax.swing.JLabel();
        lblManageEnter = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        enterpriseTable = new javax.swing.JTable();
        comboEnterpriseE = new javax.swing.JComboBox<>();
        lblEnterpriseE = new javax.swing.JLabel();
        lblCityE = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        comboboxCityE = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        jLabel1.setText("jLabel1");

        setBackground(new java.awt.Color(167, 199, 231));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnCreate.setBackground(new java.awt.Color(0, 0, 0));
        btnCreate.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnCreate.setForeground(new java.awt.Color(255, 255, 255));
        btnCreate.setText("Add Enterprise Login");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });
        add(btnCreate, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 530, -1, 30));

        txtUsernameE.setBackground(new java.awt.Color(214, 229, 244));
        txtUsernameE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUsernameEActionPerformed(evt);
            }
        });
        add(txtUsernameE, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 400, 212, 30));

        lblUsernameE.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblUsernameE.setText("Username:");
        add(lblUsernameE, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 410, -1, -1));

        txtPasswordE.setBackground(new java.awt.Color(214, 229, 244));
        add(txtPasswordE, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 440, 212, 30));

        lblPasswordE.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblPasswordE.setText("Password:");
        add(lblPasswordE, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 450, -1, -1));

        lblManageEnter.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        lblManageEnter.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblManageEnter.setText("MANAGE ENTERPRISE LOGIN DETAILS");
        add(lblManageEnter, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 80, 1210, -1));

        enterpriseTable.setBackground(new java.awt.Color(214, 229, 244));
        enterpriseTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "City", "Enterprise", "Username", "Password"
            }
        ));
        jScrollPane1.setViewportView(enterpriseTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(104, 133, 1100, 183));

        comboEnterpriseE.setBackground(new java.awt.Color(214, 229, 244));
        comboEnterpriseE.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        add(comboEnterpriseE, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 450, 212, 28));

        lblEnterpriseE.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblEnterpriseE.setText("Select Enterprise:");
        add(lblEnterpriseE, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 460, -1, -1));

        lblCityE.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblCityE.setText("Select City:");
        add(lblCityE, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 410, -1, -1));

        btnBack.setBackground(new java.awt.Color(0, 0, 0));
        btnBack.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnBack.setForeground(new java.awt.Color(255, 255, 255));
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 80, -1, -1));

        comboboxCityE.setBackground(new java.awt.Color(214, 229, 244));
        comboboxCityE.setFont(new java.awt.Font("Product Sans", 0, 18)); // NOI18N
        comboboxCityE.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboboxCityE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboboxCityEActionPerformed(evt);
            }
        });
        add(comboboxCityE, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 400, 212, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assests/icons8-contact-us-48.png"))); // NOI18N
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 60, -1, -1));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assests/5.png"))); // NOI18N
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        // TODO add your handling code here:
//        Enterprise enterprise = (Enterprise) comboEnterprise.getSelectedItem();
//        String city = txtCityName.getText();
 String pass = txtPasswordE.getText();
 String user= txtUsernameE.getText();

 if (txtUsernameE.getText().isEmpty() || txtPasswordE.getText().isEmpty() ) {
            JOptionPane.showMessageDialog(null, "Empty Fields cannot added", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
boolean flag2;
        flag2 = pass.matches("^((?=.*[0-9])(?=.*[A-Z])(?=.*[a-z])(?=.*[@$!%*#?&]).{1,20})$");

        if(!flag2) {
            JOptionPane.showMessageDialog(null, "Password should contain 1 uppercase letter, lowercase letter, number, and special character.");
            return;
        }
        
        for (City cities : ecosystem.getCityList()) {
//            if (cities.getName().equals(city)) {
                for (Enterprise enterprise : cities.getEnterpriseDirectory().getEnterpriseArrayList()) {
                    if (comboEnterpriseE.getSelectedItem().toString().equals(enterprise.getName())) {
                        String username = txtUsernameE.getText();
                        String password = txtPasswordE.getText();

                        if (enterprise.getUserAccountDirectory().authenticateUser(username, password) != null) {
                            JOptionPane.showMessageDialog(null, "Username Already exists");
                            return;
                        }

                        if (username.equals("") || password.equals("")) {
                            JOptionPane.showMessageDialog(null, "Username and password can not be empty");
                            return;
                        }


                        Employee employee = enterprise.getEmployeeDirectory().createEmp(username);
                        //System.out.println(employee);
                        //System.out.println(enterprise.getClass().getName().toString() == "Business.Enterprise.VaccinationCenter");
                        Role role;

                        if (enterprise.getClass().getName().toString() == "Business.Enterprise.Hospital") {
                            role = new HospitalRole();
                            UserAccount account = enterprise.getUserAccountDirectory().createUserAccount(username, password, employee, role);
                            //System.out.println(account);
                        } else if (enterprise.getClass().getName().toString() == "Business.Enterprise.Laboratory") {
                            role = new LaboratoryRole();
                            UserAccount account = enterprise.getUserAccountDirectory().createUserAccount(username, password, employee, role);
                        } else if (enterprise.getClass().getName().toString() == "Business.Enterprise.Pharmacy") {
                            int count = 0;
                            for(UserAccount userAccount: enterprise.getUserAccountDirectory().getUserAccountList()){
                                if((userAccount.getRole().getClass().getName()).equals("Business.Role.PharmacyRole")){
                                    count = 1;
                                }
                            }
                            if(count==0){
                            role = new PharmacyRole();
                            UserAccount account = enterprise.getUserAccountDirectory().createUserAccount(username, password, employee, role);
                            }
                            else{
                                JOptionPane.showMessageDialog(this,"Admin Already exist");
                            }
                        } else if (enterprise.getClass().getName().toString() == "Business.Enterprise.VaccineProvider") {
                            int count = 0;
                            for(UserAccount userAccount: enterprise.getUserAccountDirectory().getUserAccountList()){
                                if((userAccount.getRole().getClass().getName()).equals("Business.Role.VaccineProviderRole")){
                                    count = 1;
                                }
                            }
                            if(count==0){
                            role = new VaccineProviderRole();
                            UserAccount account = enterprise.getUserAccountDirectory().createUserAccount(username, password, employee, role);
                            }
                            else{
                                JOptionPane.showMessageDialog(this,"Admin Already exist");
                            }
                        }
                         
                        //UserAccount account = enterprise.getUserAccountDirectory().createUserAccount(username, password, employee, role);
                        //System.out.println(account);
                        populateEnterpriseAdminTable();

                    } 
                }
        }
        //populateEnterpriseAdminTable();
        txtUsernameE.setText("");
        txtPasswordE.setText("");
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        SystemAdminWorkAreaJPanel sysAdminwjp = (SystemAdminWorkAreaJPanel) component;
       sysAdminwjp.populateTree();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);

    }//GEN-LAST:event_btnBackActionPerformed

    private void txtUsernameEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUsernameEActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUsernameEActionPerformed

    private void comboboxCityEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboboxCityEActionPerformed
        City city = (City) comboboxCityE.getSelectedItem();
        if (city != null){
            populateEnterpriseCombo(city);
        }
    }//GEN-LAST:event_comboboxCityEActionPerformed

    private boolean validateUsername(String email) {
        Pattern p = Pattern.compile("^[a-zA-z0-9]+@[a-zA-Z0-9]+.[a-zA-Z0-9]+$");
        Matcher m = p.matcher(email);
        return m.matches();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCreate;
    private javax.swing.JComboBox<String> comboEnterpriseE;
    private javax.swing.JComboBox comboboxCityE;
    private javax.swing.JTable enterpriseTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCityE;
    private javax.swing.JLabel lblEnterpriseE;
    private javax.swing.JLabel lblManageEnter;
    private javax.swing.JLabel lblPasswordE;
    private javax.swing.JLabel lblUsernameE;
    private javax.swing.JTextField txtPasswordE;
    private javax.swing.JTextField txtUsernameE;
    // End of variables declaration//GEN-END:variables

    private void populateEnterpriseAdminTable() {
        DefaultTableModel dtm = (DefaultTableModel) enterpriseTable.getModel();
        dtm.setRowCount(0);

        for (City city : ecosystem.getCityList()) {
            for (Enterprise enterprise : city.getEnterpriseDirectory().getEnterpriseArrayList()) {
                for (UserAccount userAccount : enterprise.getUserAccountDirectory().getUserAccountList()) {
                    Object[] row = new Object[4];
                    row[0] = city.getName();
                    row[1] = enterprise.getName();
                    row[2] = userAccount.getUsername();
                    row[3] = userAccount.getPassword();

                    dtm.addRow(row);
                }
            }
        }
    }
}
